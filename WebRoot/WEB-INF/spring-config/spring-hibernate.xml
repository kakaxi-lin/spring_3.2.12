<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	">
	<!-- Spring 与 Mybatis 配置整合 -->
	
	<!-- 引入数据源文件 -->  
    <context:property-placeholder location="classpath:jdbc.properties" />  
    <!-- 注解扫描 -->
    <context:component-scan base-package="yk.hibernate"></context:component-scan>
    
    <!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>  
        <property name="url" value="${jdbc.url}"></property>  
        <property name="username" value="${jdbc.username}"></property>  
        <property name="password" value="${jdbc.password}"></property>  
        <!-- 连接池启动时的初始值 -->  
        <property name="initialSize"  value="${jdbc.initialSize}" />  
        <!-- 连接池的最大值 -->  
        <property name="maxActive"  value="${jdbc.maxActive}" />  
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->  
        <property name="maxIdle"  value="${jdbc.maxIdle}" />  
        <!--    最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->  
        <property name="minIdle"  value="${jdbc.minIdle}" />  
	</bean>  
<!-- 注入SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="false">
        <!-- 注入datasource，给sessionfactoryBean内setdatasource提供数据源 -->
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <!-- //加载实体类的映射文件位置及名称 -->
        <property name="mappingLocations" value="classpath:yk/hibernate/*.hbm.xml"></property>
    </bean>  
	
	
  <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean> 
	
	<!-- aop配置声明式事务 -->
	<!-- 给哪个类加事务控制，当此类中的指定方法中抛出异常时 才有效回滚 -->
	<aop:config>
		<aop:pointcut expression="execution(* yk.hibernate.BaseDao.*(..))" id="txMethod"/>
		<aop:advisor pointcut-ref="txMethod" advice-ref="txAdvice"/>
	</aop:config>
   <aop:config >
		<aop:pointcut expression="execution(* yk.hibernate.BaseService.*(..))" id="txMethod1"/>
		<aop:advisor pointcut-ref="txMethod1" advice-ref="txAdvice"/>
	</aop:config>
	<!-- 配置事务增强 -->
	<!--hibernate4必须配置为开启事务 为dao的每个方法都得开启事务 否则 getCurrentSession()获取不到-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<!-- 只读模式，事务不会提交 -->
		<tx:method name="select*" read-only="true"/>
		<tx:method name="add*"/>
		<tx:method name="delete*"/>
		<tx:method name="save*"/>
		
		</tx:attributes>
	</tx:advice>

    
	
	
</beans>
